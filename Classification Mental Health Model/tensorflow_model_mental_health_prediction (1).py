# -*- coding: utf-8 -*-
"""Tensorflow Model Mental Health Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1llz2BlwlyDt-zKBFYxB0LEofmMfZJ8NU

# Penjelasan Model

Model ini merupakan model **klasifikasi multi-output** yang bertujuan untuk memprediksi kondisi mental seseorangâ€”meliputi **stres**, **kecemasan (anxiety)**, dan **depresi (depression)** berdasarkan data hasil asesmen psikologis serta data demografis pengguna. Model ini dirancang menggunakan **kerangka kerja TensorFlow**, yang mendukung arsitektur jaringan saraf (neural network) untuk klasifikasi kompleks dengan lebih dari satu output target.

# Perkenalan Dataset

Dataset yang digunakan dalam analisis ini adalah **[University Students Mental Health](https://www.kaggle.com/datasets/mohsenzergani/bangladeshi-university-students-mental-health?resource=download)**, yang berisi informasi terkait kesehatan mental mahasiswa. Data ini digunakan untuk memahami tingkat stress, anxiety, dan depression pada mahasiswa serta keterkaitannya dengan faktor sosiodeomografis.

# Import Library
"""

import pandas as pd
import numpy as np
import re
import seaborn as sns
import matplotlib.pyplot as plt
import json


from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import classification_report
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical

"""# Data Loading"""

# Load dataset
df = pd.read_csv('/content/mental_health_data.csv')
df.head()

df.info()

"""## Data Cleaning"""

# Bersihkan nama kolom
def clean_column(col):
    col = re.sub(r'^\d+\.\s*', '', col)
    col = re.sub(r'^"\d+\.\s*', '', col)
    col = col.replace('"', '')
    col = col.strip()
    return col

df.columns = [clean_column(col) for col in df.columns]

# Rename kolom
df = df.rename(columns={
    "Age": "age",
    "Gender": "gender",
    "University": "university",
    "Department": "department",
    "Academic Year": "academic_year",
    "Current CGPA": "cgpa",
    "Did you receive a waiver or scholarship at your university?": "got_scholarship",

    # Anxiety Questions
    "In a semester, how often you felt nervous, anxious or on edge due to academic pressure?": "anxiety_q1",
    "In a semester, how often have you been unable to stop worrying about your academic affairs?": "anxiety_q2",
    "In a semester, how often have you had trouble relaxing due to academic pressure?": "anxiety_q3",
    "In a semester, how often have you been easily annoyed or irritated because of academic pressure?": "anxiety_q4",
    "In a semester, how often have you worried too much about academic affairs?": "anxiety_q5",
    "In a semester, how often have you been so restless due to academic pressure that it is hard to sit still?": "anxiety_q6",
    "In a semester, how often have you felt afraid, as if something awful might happen?": "anxiety_q7",
    "Anxiety Value": "anxiety_value",
    "Anxiety Label": "anxiety_label",

    # Stress Questions
    "In a semester, how often have you felt upset due to something that happened in your academic affairs?": "stress_q1",
    "In a semester, how often you felt as if you were unable to control important things in your academic affairs?": "stress_q2",
    "In a semester, how often you felt nervous and stressed because of academic pressure?": "stress_q3",
    "In a semester, how often you felt as if you could not cope with all the mandatory academic activities? (e.g, assignments, quiz, exams)": "stress_q4",
    "In a semester, how often you felt confident about your ability to handle your academic / university problems?": "stress_q5",
    "In a semester, how often you felt as if things in your academic life is going on your way?": "stress_q6",
    "In a semester, how often are you able to control irritations in your academic / university affairs?": "stress_q7",
    "In a semester, how often you felt as if your academic performance was on top?": "stress_q8",
    "In a semester, how often you got angered due to bad performance or low grades that is beyond your control?": "stress_q9",
    "In a semester, how often you felt as if academic difficulties are piling up so high that you could not overcome them?": "stress_q10",
    "Stress Value": "stress_value",
    "Stress Label": "stress_label",

    # Depression Questions
    "In a semester, how often have you had little interest or pleasure in doing things?": "depression_q1",
    "In a semester, how often have you been feeling down, depressed or hopeless?": "depression_q2",
    "In a semester, how often have you had trouble falling or staying asleep, or sleeping too much?": "depression_q3",
    "In a semester, how often have you been feeling tired or having little energy?": "depression_q4",
    "In a semester, how often have you had poor appetite or overeating?": "depression_q5",
    "In a semester, how often have you been feeling bad about yourself - or that you are a failure or have let yourself or your family down?": "depression_q6",
    "In a semester, how often have you been having trouble concentrating on things, such as reading the books or watching television?": "depression_q7",
    "In a semester, how often have you moved or spoke too slowly for other people to notice? Or you've been moving a lot more than usual because you've been restless?": "depression_q8",
    "In a semester, how often have you had thoughts that you would be better off dead, or of hurting yourself?": "depression_q9",
    "Depression Value": "depression_value",
    "Depression Label": "depression_label"
})

# Hapus kolom yang tidak diperlukan
df = df.drop(['depression_value', 'anxiety_value', 'stress_value', 'university', 'department'], axis=1)

df.info()

"""Berikut adalah penjelasan singkat untuk masing-masing kolom dalam data:

1. **age**: Umur responden.
2. **gender**: Jenis kelamin responden.
3. **academic\_year**: Tahun akademik yang diikuti oleh responden.
4. **cgpa**: IPK (Cumulative Grade Point Average) responden, yang menunjukkan kinerja akademik mereka.
5. **got\_scholarship**: Menunjukkan apakah responden mendapatkan beasiswa atau tidak.
6. **anxiety\_q1 - anxiety\_q7**: Nilai untuk tujuh pertanyaan terkait kecemasan responden.
7. **anxiety\_label**: Label yang menunjukkan tingkat kecemasan responden (misalnya, severe anxiety, moderate anxiety, mild anxiety, minimal anxiety).
8. **stress\_q1 - stress\_q10**: Nilai untuk sepuluh pertanyaan terkait stres responden.
9. **stress\_label**: Label yang menunjukkan tingkat stres responden (misalnya, moderate stress, high perceived stress, low stress).
10. **depression\_q1 - depression\_q9**: Nilai untuk sembilan pertanyaan terkait depresi responden.
11. **depression\_label**: Label yang menunjukkan tingkat depresi responden (misalnya, moderately severe depression, severe depression, moderate depression, mild depression, minimal depression, no depression).


"""

# Cek missing value
print("\nMissing values per fitur:")
print(df.isnull().sum())

"""Tidak terdapat missing value pada dataframe tersebut."""

# cek data duplikat
duplicates = df.duplicated()

print("Baris duplikat: ")
print(df[duplicates])

# Hapus semua baris duplikat
df_cleaned = df.drop_duplicates()

# Cek kembali baris duplikat
duplicates = df_cleaned.duplicated()

print("Baris setelah hapus duplikat: ")
print(df_cleaned[duplicates])

"""# EDA"""

# Tinjau jumlah baris dan kolom dalam dataset
df_cleaned.shape

"""Data tersebut memiliki 1972 baris dan 34 kolom"""

# Lihat persebaran label
print("Stress Label Distribution:")
print(df_cleaned['stress_label'].value_counts())
print("\n")

print("Anxiety Label Distribution:")
print(df_cleaned['anxiety_label'].value_counts())
print("\n")

print("Depression Label Distribution:")
print(df_cleaned['depression_label'].value_counts())

sns.set(style="whitegrid")
fig, axs = plt.subplots(1, 3, figsize=(18, 5))

# Stress label plot
sns.countplot(x='stress_label', data=df_cleaned, order=df_cleaned['stress_label'].value_counts().index, ax=axs[0], palette='Reds')
axs[0].set_title('Distribusi Label Stress')
axs[0].set_xlabel('Label Stress')
axs[0].set_ylabel('Jumlah')
axs[0].tick_params(axis='x', rotation=30)

# Anxiety label plot
sns.countplot(x='anxiety_label', data=df_cleaned, order=df_cleaned['anxiety_label'].value_counts().index, ax=axs[1], palette='Blues')
axs[1].set_title('Distribusi Label Anxiety')
axs[1].set_xlabel('Label Anxiety')
axs[1].set_ylabel('Jumlah')
axs[1].tick_params(axis='x', rotation=30)

# Depression label plot
sns.countplot(x='depression_label', data=df_cleaned, order=df_cleaned['depression_label'].value_counts().index, ax=axs[2], palette='Purples')
axs[2].set_title('Distribusi Label Depression')
axs[2].set_xlabel('Label Depression')
axs[2].set_ylabel('Jumlah')
axs[2].tick_params(axis='x', rotation=30)

plt.suptitle('Visualisasi Persebaran Label Kesehatan Mental', fontsize=16)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

"""### Distribusi Karakteristik Demografis"""

palette = sns.color_palette("Set2")
sns.set_style("whitegrid")
fig, axs = plt.subplots(1, 4, figsize=(15, 5))

# Pie chart Gender
axs[0].pie(
    df["gender"].value_counts(),
    labels=df["gender"].value_counts().index,
    autopct='%1.1f%%',
    colors=palette
)
axs[0].set_title("Gender", fontsize=14)

# Pie chart Academic Year
axs[1].pie(
    df["academic_year"].value_counts(),
    labels=df["academic_year"].value_counts().index,
    autopct='%1.1f%%',
    colors=palette
)
axs[1].set_title("Academic Year", fontsize=14)

# Pie chart Got Scholarship
axs[2].pie(
    df["got_scholarship"].value_counts(),
    labels=df["got_scholarship"].value_counts().index,
    autopct='%1.1f%%',
    colors=palette
)
axs[2].set_title("Got Scholarship", fontsize=14)

# Pie chart Got Scholarship
axs[3].pie(
    df["age"].value_counts(),
    labels=df["age"].value_counts().index,
    autopct='%1.1f%%',
    colors=palette
)
axs[3].set_title("Umur", fontsize=14)

plt.tight_layout()
plt.show()

"""**Insight**
1. **Gender**: Mayoritas responden adalah laki-laki (69,4%), sementara perempuan hanya 30,1%.  
2. **Tahun Akademik**: Responden terbanyak berasal dari tahun pertama (29,9%) dan tahun ketiga, dengan partisipasi tahun keempat paling rendah (3,6%).  
3. **Penerima Beasiswa"**: Sebagian besar responden (79,5%) tidak mendapatkan beasiswa.

###  Apakah terdapat perbedaan rata-rata skor pertanyaan stres berdasarkan gender?
"""

# Tentukan kolom-kolom stres
stress_cols = [col for col in df_cleaned.columns if 'stress_q' in col]

# Hitung total skor stres per baris tanpa menambah kolom baru
total_stress_per_row = df_cleaned[stress_cols].sum(axis=1)

# Hitung rata-rata total stres berdasarkan gender
mean_stress_by_gender = df_cleaned.assign(total_stress_score=total_stress_per_row).groupby('gender')['total_stress_score'].mean().reset_index()

# Visualisasi dengan barplot
sns.barplot(data=mean_stress_by_gender, x='gender', y='total_stress_score', palette='Set2')
plt.title("Rata-rata Total Skor Stres Berdasarkan Gender")
plt.xlabel("Gender")
plt.ylabel("Rata-rata Total Skor Stres")
plt.ylim(0, mean_stress_by_gender['total_stress_score'].max() + 5)
plt.show()

"""**Insight**

Berdasarkan visualisasi, terlihat perbedaan rata-rata skor stres antar gender: kelompok "Prefer not to say" memiliki rata-rata tertinggi (sekitar 29), diikuti perempuan (sekitar 24.5), dan laki-laki dengan rata-rata terendah (sekitar 22).

Kesimpulan: Terdapat perbedaan tingkat stres berdasarkan gender, dengan kelompok yang tidak mengungkapkan gender mengalami stres tertinggi, sementara laki-laki cenderung mengalami tingkat stres yang lebih rendah dibandingkan perempuan.

# Data Splitting
"""

# Memisahkan fitur (X) dan label target (y) untuk masing-masing kategori: depresi, kecemasan, dan stres
X = df_cleaned.drop(columns=['depression_label', 'anxiety_label', 'stress_label'])
y_depression = df_cleaned['depression_label']
y_anxiety = df_cleaned['anxiety_label']
y_stress = df_cleaned['stress_label']

y_depression

# Split data menjadi 80% data train dan 20% data test untuk 3 label
X_train, X_test, y_dep_train, y_dep_test, y_anx_train, y_anx_test, y_str_train, y_str_test = train_test_split(
    X, y_depression, y_anxiety, y_stress, test_size=0.2, random_state=42
)

"""# Preprocessing"""

# Pisahkan fitur kategori dan numerikal
categorical_features = X.select_dtypes(include=['object', 'category']).columns.tolist()
numerical_features = X.select_dtypes(include=np.number).columns.tolist()

print("\nCategorical Features:", categorical_features)
print("Numerical Features:", numerical_features)

# Standarisasi fitur numerikal
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

# One Hot Encoding fitur kategorikal
categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))  # Tambahkan sparse_output=False agar hasilnya array biasa
])

# Gabungkan dalam satu pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numerical_features),
        ('cat', categorical_transformer, categorical_features)
    ],
    remainder='drop'
)

# Fit dan transform pada train set, transform untuk test set
X_train_processed = preprocessor.fit_transform(X_train)
X_test_processed = preprocessor.transform(X_test)

# ONE-HOT ENCODE TARGET (karena klasifikasi multikelas)

# Depression label
le_depression = LabelEncoder()
y_dep_train_encoded = le_depression.fit_transform(y_dep_train)
y_dep_test_encoded = le_depression.transform(y_dep_test)
y_dep_train_cat = to_categorical(y_dep_train_encoded, num_classes=6)
y_dep_test_cat = to_categorical(y_dep_test_encoded, num_classes=6)

# Anxiety label
le_anxiety = LabelEncoder()
y_anx_train_encoded = le_anxiety.fit_transform(y_anx_train)
y_anx_test_encoded = le_anxiety.transform(y_anx_test)
y_anx_train_cat = to_categorical(y_anx_train_encoded, num_classes=4)
y_anx_test_cat = to_categorical(y_anx_test_encoded, num_classes=4)

# Stress lebel
le_stress = LabelEncoder()
y_str_train_encoded = le_stress.fit_transform(y_str_train)
y_str_test_encoded = le_stress.transform(y_str_test)
y_str_train_cat = to_categorical(y_str_train_encoded, num_classes=3)
y_str_test_cat = to_categorical(y_str_test_encoded, num_classes=3)

# Simpan parameter standarisasi
scaler = preprocessor.named_transformers_['num'].named_steps['scaler']
means = scaler.mean_.tolist()
stds = scaler.scale_.tolist()

with open("scaler_params.json", "w") as f:
    json.dump({"mean": means, "std": stds}, f)

# Simpan detail preprocessing
cat_features = preprocessor.transformers_[1][2]
categories = preprocessor.transformers_[1][1].named_steps['onehot'].categories_
num_features = preprocessor.transformers_[0][2]
means = preprocessor.transformers_[0][1].named_steps['scaler'].mean_
stds = preprocessor.transformers_[0][1].named_steps['scaler'].scale_

# Save to a file
with open('preprocessing_details.json', 'w') as f:
    json.dump({
        'categorical_features': cat_features,
        'categories': [c.tolist() for c in categories],
        'numerical_features': num_features,
        'means': means.tolist(),
        'stds': stds.tolist(),
    }, f, indent=2)

# Print the mapping for each label encoder
print("Depression Label Mapping:")
for i, label in enumerate(le_depression.classes_):
    print(f"{label}: {i}")

print("\nAnxiety Label Mapping:")
for i, label in enumerate(le_anxiety.classes_):
    print(f"{label}: {i}")

print("\nStress Label Mapping:")
for i, label in enumerate(le_stress.classes_):
    print(f"{label}: {i}")

# Print the mapping for categorical features
print("\nCategorical Feature Mappings:")
for feature in categorical_features:
    print(f"\nFeature: {feature}")
    for i, category in enumerate(preprocessor.named_transformers_['cat'].named_steps['onehot'].categories_[categorical_features.index(feature)]):
        print(f"{category}: {i}")

print(y_dep_train_cat)

"""# Modelling"""

# bangun model
input_layer = Input(shape=(X_train_processed.shape[1],))

x = Dense(128, activation='relu')(input_layer)
x = Dense(64, activation='relu')(x)

# Output untuk masing-masing label
output_depression = Dense(6, activation='softmax', name='depression')(x)
output_anxiety = Dense(4, activation='softmax', name='anxiety')(x)
output_stress = Dense(3, activation='softmax', name='stress')(x)

# Model
model = Model(inputs=input_layer, outputs=[output_depression, output_anxiety, output_stress])

# Compile model
model.compile(
    optimizer='adam',
    loss={
        'depression': 'categorical_crossentropy',
        'anxiety': 'categorical_crossentropy',
        'stress': 'categorical_crossentropy'
    },
    metrics={
        'depression': 'accuracy',
        'anxiety': 'accuracy',
        'stress': 'accuracy'
    }
)

model.summary()

# Train model
history = model.fit(
    X_train_processed,
    {
        'depression': y_dep_train_cat,
        'anxiety': y_anx_train_cat,
        'stress': y_str_train_cat
    },
    validation_split=0.2,
    epochs=50,
    batch_size=32,
    callbacks=[EarlyStopping(patience=5, restore_best_weights=True)],
    verbose=1
)

# Evaluasi model
results = model.evaluate(X_test_processed, {
    'depression': y_dep_test_cat,
    'anxiety': y_anx_test_cat,
    'stress': y_str_test_cat
})

print(f"\nTotal Loss: {results[0]:.4f}")
print(f"Loss Depression: {results[1]:.4f}, Accuracy Depression: {results[4]:.4f}")
print(f"Loss Anxiety: {results[2]:.4f}, Accuracy Anxiety: {results[5]:.4f}")
print(f"Loss Stress: {results[3]:.4f}, Accuracy Stress: {results[6]:.4f}")

y_pred = model.predict(X_test_processed)
y_pred_depression = le_depression.inverse_transform(np.argmax(y_pred[0], axis=1))
y_pred_anxiety = le_anxiety.inverse_transform(np.argmax(y_pred[1], axis=1))
y_pred_stress = le_stress.inverse_transform(np.argmax(y_pred[2], axis=1))

# Confusion matrix for each label
cm_depression = confusion_matrix(y_dep_test, y_pred_depression, labels=le_depression.classes_)
cm_anxiety = confusion_matrix(y_anx_test, y_pred_anxiety, labels=le_anxiety.classes_)
cm_stress = confusion_matrix(y_str_test, y_pred_stress, labels=le_stress.classes_)

fig, axs = plt.subplots(1, 3, figsize=(20, 6))

# Depression Confusion Matrix
cmp_depression = ConfusionMatrixDisplay(confusion_matrix=cm_depression, display_labels=le_depression.classes_)
cmp_depression.plot(ax=axs[0], cmap=plt.cm.Blues)
axs[0].set_title('Confusion Matrix: Depression')
axs[0].set_xlabel('Predicted Label')
axs[0].set_ylabel('True Label')
axs[0].tick_params(axis='x', rotation=90)
axs[0].tick_params(axis='y', rotation=0)


# Anxiety Confusion Matrix
cmp_anxiety = ConfusionMatrixDisplay(confusion_matrix=cm_anxiety, display_labels=le_anxiety.classes_)
cmp_anxiety.plot(ax=axs[1], cmap=plt.cm.Blues)
axs[1].set_title('Confusion Matrix: Anxiety')
axs[1].set_xlabel('Predicted Label')
axs[1].set_ylabel('True Label')
axs[1].tick_params(axis='x', rotation=90)
axs[1].tick_params(axis='y', rotation=0)

# Stress Confusion Matrix
cmp_stress = ConfusionMatrixDisplay(confusion_matrix=cm_stress, display_labels=le_stress.classes_)
cmp_stress.plot(ax=axs[2], cmap=plt.cm.Blues)
axs[2].set_title('Confusion Matrix: Stress')
axs[2].set_xlabel('Predicted Label')
axs[2].set_ylabel('True Label')
axs[2].tick_params(axis='x', rotation=90)
axs[2].tick_params(axis='y', rotation=0)

plt.tight_layout()
plt.show()

# Classification Report for Depression
print("Classification Report - Depression:")
print(classification_report(y_dep_test, y_pred_depression))

# Classification Report for Anxiety
print("\nClassification Report - Anxiety:")
print(classification_report(y_anx_test, y_pred_anxiety))

# Classification Report for Stress
print("\nClassification Report - Stress:")
print(classification_report(y_str_test, y_pred_stress))

# Depression loss
plt.figure(figsize=(6, 3))
plt.plot(history.history['depression_loss'], label='Training Loss Depression')
plt.plot(history.history['val_depression_loss'], label='Validation Loss Depression')
plt.title('Loss Depression during Training')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

# Anxiety loss
plt.figure(figsize=(6, 3))
plt.plot(history.history['anxiety_loss'], label='Training Loss Anxiety')
plt.plot(history.history['val_anxiety_loss'], label='Validation Loss Anxiety')
plt.title('Loss Anxiety during Training')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

# Stress loss
plt.figure(figsize=(6, 3))
plt.plot(history.history['stress_loss'], label='Training Loss Stress')
plt.plot(history.history['val_stress_loss'], label='Validation Loss Stress')
plt.title('Loss Stress during Training')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

"""# Inference"""

# Buat data baru
new_data = {
    'age': ['18-22', '23-26', '18-22'],
    'gender': ['Male', 'Female', 'Female'],
    'academic_year': ['Third Year or Equivalent', 'Fourth Year or Equivalent', 'First Year or Equivalent'],
    'cgpa': ['3.00 - 3.39', '3.40 - 3.79', '3.40 - 3.79'],
    'got_scholarship': ['No', 'Yes', 'No'],
    'anxiety_q1': [3, 1, 0],
    'anxiety_q2': [3, 1, 2],
    'anxiety_q3': [2, 1, 0],
    'anxiety_q4': [3, 1, 0],
    'anxiety_q5': [3, 1, 1],
    'anxiety_q6': [2, 1, 0],
    'anxiety_q7': [3, 1, 0],
    'stress_q1': [4, 1, 1],
    'stress_q2': [4, 2, 2],
    'stress_q3': [4, 2, 1],
    'stress_q4': [3, 1, 1],
    'stress_q5': [1, 3, 4],
    'stress_q6': [2, 3, 2],
    'stress_q7': [1, 3, 4],
    'stress_q8': [2, 3, 3],
    'stress_q9': [4, 1, 1],
    'stress_q10': [4, 1, 1],
    'depression_q1': [3, 1, 2],
    'depression_q2': [3, 1, 0],
    'depression_q3': [3, 1, 0],
    'depression_q4': [3, 1, 0],
    'depression_q5': [2, 1, 0],
    'depression_q6': [3, 1, 1],
    'depression_q7': [3, 1, 0],
    'depression_q8': [2, 1, 0],
    'depression_q9': [3, 1, 0]
}
new_data_df = pd.DataFrame(new_data)

# Kelompokkan menggunakan data baru ke kategorikal dan numerikal
categorical_features = new_data_df.select_dtypes(include=['object', 'category']).columns.tolist()
numerical_features = new_data_df.select_dtypes(include=np.number).columns.tolist()

# Convert types
for col in categorical_features:
    new_data_df[col] = new_data_df[col].astype(str)
for col in numerical_features:
    new_data_df[col] = pd.to_numeric(new_data_df[col], errors='coerce')

# Transform
new_data_processed = preprocessor.transform(new_data_df)

target_cols = ['depression', 'anxiety', 'stress']
label_encoders = {
    'depression': le_depression,
    'anxiety': le_anxiety,
    'stress': le_stress
}

# Prediksi
predictions = model.predict(new_data_processed)

# Tampilkan hasil
for i in range(len(new_data_df)):
    print(f"Sample {i+1}: Predicted Labels = [", end='')
    label_outputs = []

    for j, col in enumerate(target_cols):
        pred_probs = predictions[j][i]
        predicted_class_index = np.argmax(pred_probs)
        predicted_label = label_encoders[col].inverse_transform([predicted_class_index])[0]
        label_outputs.append(f"'{predicted_label}'")

    print(" ".join(label_outputs) + "]")

    for j, col in enumerate(target_cols):
        pred_probs = predictions[j][i]
        classes = label_encoders[col].classes_
        prob_dict = {label: f"{prob:.4f}" for label, prob in zip(classes, pred_probs)}
        print(f"  For label {col}_label:")
        print(f"    Probabilities: {prob_dict}")

    print("----------------------------------------------------")

"""# Save ke TFJS"""

model.export('saved_model')

!pip install tensorflowjs

!tensorflowjs_converter --input_format=tf_saved_model --output_format=tfjs_graph_model saved_model tfjs_model

import shutil
from google.colab import files

shutil.make_archive('tfjs_model', 'zip', 'tfjs_model')
files.download('tfjs_model.zip')

